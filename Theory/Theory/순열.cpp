//
//  순열.cpp
//  Theory
//
//  Created by jiho park on 2020/02/07.
//  Copyright © 2020 jiho park. All rights reserved.
//

#include <iostream>
#include <vector>

#define endl "\n"
using namespace std;

//5가지 숫자에서 3개의 숫자로 순열 만들기.
//순열과 조합의 차이점음 순서가 있냐 없냐의 차이이다.
//순열을 순서가 있기 때문에 조합과 달리 {1,2,3}과 {2,1,3}은 다르다.

int arr[5];
bool select[5];
vector<int> v;//조합과 달리 벡터를 사용한 이유는 1,2,3이 select에서 true일 때 조합에서는 그대로 출력하면 되지만 2,1,3을 뽑고 싶을 때 그대로 출력해버리면 순서 때문에 1,2,3을 출력하게 된다. 그래서 벡터에다가 push하고 pop을 이용해서 벡터에 들어간 순서대로 출력한다.

void go(int cnt){//순열과 달리 idx가 필요 없다. 과거의 시작점을 다시 봐야 하기 때문이다.
    if(cnt==3){
        for(int i=0; i<v.size(); i++)
            cout << v[i] << " ";
        cout << endl;
        
        return;//조합2와 같이 갯수를 1이상으로 뽑지 않는 이상 return은 필요하다.
    }
    for(int i=0; i<5; i++){//순열과 달리 i는 0부터 시작한다.
        if(select[i]) continue;
        v.push_back(arr[i]);
        go(cnt+1);
        v.pop_back();
        select[i]=false;
    }
}

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    for(int i=0; i<5; i++)
        arr[i]=i+1;
    
    go(0);
    
    return 0;
}
/*실행결과
 1 1 1
 1 1 2
 1 1 3
 1 1 4
 1 1 5
 1 2 1
 1 2 2
 1 2 3
 1 2 4
 1 2 5
 1 3 1
 1 3 2
 1 3 3
 1 3 4
 1 3 5
 1 4 1
 1 4 2
 1 4 3
 1 4 4
 1 4 5
 1 5 1
 1 5 2
 1 5 3
 1 5 4
 1 5 5
 2 1 1
 2 1 2
 2 1 3
 2 1 4
 2 1 5
 2 2 1
 2 2 2
 2 2 3
 2 2 4
 2 2 5
 2 3 1
 2 3 2
 2 3 3
 2 3 4
 2 3 5
 2 4 1
 2 4 2
 2 4 3
 2 4 4
 2 4 5
 2 5 1
 2 5 2
 2 5 3
 2 5 4
 2 5 5
 3 1 1
 3 1 2
 3 1 3
 3 1 4
 3 1 5
 3 2 1
 3 2 2
 3 2 3
 3 2 4
 3 2 5
 3 3 1
 3 3 2
 3 3 3
 3 3 4
 3 3 5
 3 4 1
 3 4 2
 3 4 3
 3 4 4
 3 4 5
 3 5 1
 3 5 2
 3 5 3
 3 5 4
 3 5 5
 4 1 1
 4 1 2
 4 1 3
 4 1 4
 4 1 5
 4 2 1
 4 2 2
 4 2 3
 4 2 4
 4 2 5
 4 3 1
 4 3 2
 4 3 3
 4 3 4
 4 3 5
 4 4 1
 4 4 2
 4 4 3
 4 4 4
 4 4 5
 4 5 1
 4 5 2
 4 5 3
 4 5 4
 4 5 5
 5 1 1
 5 1 2
 5 1 3
 5 1 4
 5 1 5
 5 2 1
 5 2 2
 5 2 3
 5 2 4
 5 2 5
 5 3 1
 5 3 2
 5 3 3
 5 3 4
 5 3 5
 5 4 1
 5 4 2
 5 4 3
 5 4 4
 5 4 5
 5 5 1
 5 5 2
 5 5 3
 5 5 4
 5 5 5
 */
